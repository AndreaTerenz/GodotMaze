[gd_scene load_steps=3 format=2]

[ext_resource path="res://scenes/UI.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

signal maze_done

var SCRN_SIZE := Vector2.ZERO
var grid : CellGrid = null

func _ready() -> void:
	randomize()
	self.SCRN_SIZE = get_viewport_rect().size
	
	var cols := int(self.SCRN_SIZE.x / Cell.SIZE.x) 
	var rows := int(self.SCRN_SIZE.y / Cell.SIZE.y)
	var offset := (SCRN_SIZE - Cell.SIZE*Vector2(cols, rows))/2
	
	self.grid = CellGrid.new(rows, cols, offset)
	self.grid.connect(\"maze_done\", self, \"emit_maze_done\")
	call_deferred(\"add_child\", self.grid)
	
	get_tree().get_root().connect(\"size_changed\", self, \"handle_resize\")

func _input(_event: InputEvent) -> void:
	if Input.is_action_just_pressed(\"ui_cancel\"):
		print(\"quitting...\\n\\n\")
		
		get_tree().quit()

func emit_maze_done() -> void:
	emit_signal(\"maze_done\")

func handle_resize():
	var delta := get_viewport_rect().size - self.SCRN_SIZE
	self.grid.translate(delta/2)
	self.SCRN_SIZE = get_viewport_rect().size

func on_Generate(alg : String) -> void:
	self.grid.generate(alg)

func on_Reset() -> void:
	self.grid.reset_cells()
"

[node name="Main" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Grid" type="Node2D" parent="."]
script = SubResource( 1 )

[node name="UI" parent="." instance=ExtResource( 1 )]

[connection signal="maze_done" from="Grid" to="UI" method="_on_Grid_maze_done"]
[connection signal="generate" from="UI" to="Grid" method="on_Generate"]
[connection signal="reset" from="UI" to="Grid" method="on_Reset"]
